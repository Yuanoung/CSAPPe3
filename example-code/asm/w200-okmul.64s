	.file	"w200-okmul.c"
	.text
	.globl	tmult_ok1
	.type	tmult_ok1, @function
tmult_ok1:
	imulq	%rdi, %rsi
	movq	%rsi, (%rdx)
#APP
# 23 "w200-okmul.c" 1
	setae %al
# 0 "" 2
#NO_APP
	movl	$0, %eax
	ret
	.size	tmult_ok1, .-tmult_ok1
	.globl	tmult_ok2
	.type	tmult_ok2, @function
tmult_ok2:
	pushq	%rbx
	imulq	%rdi, %rsi
	movq	%rsi, (%rdx)
#APP
# 34 "w200-okmul.c" 1
	setae %bl          # Set low-order byte
	movzbl %bl,%eax  # Zero extend to be result
# 0 "" 2
#NO_APP
	popq	%rbx
	ret
	.size	tmult_ok2, .-tmult_ok2
	.globl	tmult_ok3
	.type	tmult_ok3, @function
tmult_ok3:
	imulq	%rdi, %rsi
	movq	%rsi, (%rdx)
#APP
# 51 "w200-okmul.c" 1
	setae %al            # Set result
# 0 "" 2
#NO_APP
	movzbl	%al, %eax
	ret
	.size	tmult_ok3, .-tmult_ok3
	.globl	tmult_ok4
	.type	tmult_ok4, @function
tmult_ok4:
	movq	%rsi, %rax
#APP
# 65 "w200-okmul.c" 1
	imulq %rdi,%rax   # Compute y = x * y
	setae %dil        # Set result
# 0 "" 2
#NO_APP
	movq	%rax, (%rdx)
	movzbl	%dil, %eax
	ret
	.size	tmult_ok4, .-tmult_ok4
	.globl	umult_ok
	.type	umult_ok, @function
umult_ok:
	movq	%rdx, %rcx
#APP
# 89 "w200-okmul.c" 1
	movq %rdi,%rax      # Get x
	mulq %rsi            # Unsigned long multiply by y
	movq %rax,(%rcx)      # Store low-order 8 bytes at dest
	setae %dil           # Set result
# 0 "" 2
#NO_APP
	movzbl	%dil, %eax
	ret
	.size	umult_ok, .-umult_ok
	.globl	tmult_sat
	.type	tmult_sat, @function
tmult_sat:
	movq	%rdi, %rax
	notq	%rax
	shrq	$63, %rax
	movq	%rsi, %rdx
	shrq	$63, %rdx
	cmpb	%dl, %al
	je	.L10
	movabsq	$9223372036854775807, %rax
	jmp	.L8
.L10:
	movabsq	$-9223372036854775808, %rax
.L8:
	imulq	%rdi, %rsi
#APP
# 116 "w200-okmul.c" 1
	setae %dl            # Set result
# 0 "" 2
#NO_APP
	testb	%dl, %dl
	je	.L9
	movq	%rsi, %rax
.L9:
	rep ret
	.size	tmult_sat, .-tmult_sat
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"OK"
.LC1:
	.string	"ERR"
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC2:
	.string	"Signed multiply: %ld*%ld->%ld, ok = %d\n"
	.align 8
.LC3:
	.string	"%s tmult_ok_asm: %ld*%ld->%ld, ok = %d\n"
	.align 8
.LC4:
	.string	"%s tmult_ok1: %ld*%ld->%ld, ok = %d\n"
	.align 8
.LC5:
	.string	"%s tmult_ok2: %ld*%ld->%ld, ok = %d\n"
	.align 8
.LC6:
	.string	"%s tmult_ok3: %ld*%ld->%ld, ok = %d\n"
	.align 8
.LC7:
	.string	"%s tmult_ok4: %ld*%ld->%ld, ok = %d\n"
	.align 8
.LC8:
	.string	"\nUnsigned long multiply: %lu*%lu->%lu, ok = %d\n"
	.align 8
.LC9:
	.string	"%s umult_ok_asm: %lu*%lu->%lu, ok = %d\n"
	.align 8
.LC10:
	.string	"%s umult_ok: %lu*%lu->%lu, ok = %d\n"
	.text
	.globl	main
	.type	main, @function
main:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$40, %rsp
	movl	%edi, %ebp
	movq	%rsi, %r12
	movq	%fs:40, %rax
	movq	%rax, 24(%rsp)
	xorl	%eax, %eax
	cmpl	$1, %edi
	jle	.L25
	movq	8(%rsi), %rdi
	movl	$0, %edx
	movl	$0, %esi
	call	strtol
	movq	%rax, %rbx
	jmp	.L12
.L25:
	movabsq	$4294967296, %rbx
.L12:
	cmpl	$2, %ebp
	jle	.L26
	movq	16(%r12), %rdi
	movl	$0, %edx
	movl	$0, %esi
	call	strtol
	movq	%rax, %rbp
	jmp	.L13
.L26:
	movl	$4294967295, %ebp
.L13:
	testq	%rbx, %rbx
	je	.L27
	movq	%rbx, %rax
	imulq	%rbp, %rax
	cqto
	idivq	%rbx
	cmpq	%rax, %rbp
	jne	.L28
	movl	$1, %r12d
	jmp	.L14
.L27:
	movl	$1, %r12d
	jmp	.L14
.L28:
	movl	$0, %r12d
.L14:
	movq	%rbx, %r13
	imulq	%rbp, %r13
	movl	%r12d, %r9d
	movq	%r13, %r8
	movq	%rbp, %rcx
	movq	%rbx, %rdx
	movl	$.LC2, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	8(%rsp), %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	tmult_ok_asm
	movq	8(%rsp), %r9
	cmpl	%eax, %r12d
	jne	.L29
	cmpq	%r9, %r13
	je	.L30
	movl	$.LC1, %edx
	jmp	.L15
.L29:
	movl	$.LC1, %edx
	jmp	.L15
.L30:
	movl	$.LC0, %edx
.L15:
	subq	$8, %rsp
	pushq	%rax
	movq	%rbp, %r8
	movq	%rbx, %rcx
	movl	$.LC3, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	24(%rsp), %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	tmult_ok1
	movq	24(%rsp), %r9
	addq	$16, %rsp
	cmpl	%eax, %r12d
	jne	.L31
	cmpq	%r9, %r13
	je	.L32
	movl	$.LC1, %edx
	jmp	.L16
.L31:
	movl	$.LC1, %edx
	jmp	.L16
.L32:
	movl	$.LC0, %edx
.L16:
	subq	$8, %rsp
	pushq	%rax
	movq	%rbp, %r8
	movq	%rbx, %rcx
	movl	$.LC4, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	24(%rsp), %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	tmult_ok2
	movq	24(%rsp), %r9
	addq	$16, %rsp
	cmpl	%eax, %r12d
	jne	.L33
	cmpq	%r9, %r13
	je	.L34
	movl	$.LC1, %edx
	jmp	.L17
.L33:
	movl	$.LC1, %edx
	jmp	.L17
.L34:
	movl	$.LC0, %edx
.L17:
	subq	$8, %rsp
	pushq	%rax
	movq	%rbp, %r8
	movq	%rbx, %rcx
	movl	$.LC5, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	24(%rsp), %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	tmult_ok2
	movq	24(%rsp), %r9
	addq	$16, %rsp
	cmpl	%eax, %r12d
	jne	.L35
	cmpq	%r9, %r13
	je	.L36
	movl	$.LC1, %edx
	jmp	.L18
.L35:
	movl	$.LC1, %edx
	jmp	.L18
.L36:
	movl	$.LC0, %edx
.L18:
	subq	$8, %rsp
	pushq	%rax
	movq	%rbp, %r8
	movq	%rbx, %rcx
	movl	$.LC5, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	24(%rsp), %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	tmult_ok3
	movq	24(%rsp), %r9
	addq	$16, %rsp
	cmpl	%eax, %r12d
	jne	.L37
	cmpq	%r9, %r13
	je	.L38
	movl	$.LC1, %edx
	jmp	.L19
.L37:
	movl	$.LC1, %edx
	jmp	.L19
.L38:
	movl	$.LC0, %edx
.L19:
	subq	$8, %rsp
	pushq	%rax
	movq	%rbp, %r8
	movq	%rbx, %rcx
	movl	$.LC6, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	24(%rsp), %rdx
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	tmult_ok4
	movq	24(%rsp), %r9
	addq	$16, %rsp
	cmpl	%eax, %r12d
	jne	.L39
	cmpq	%r9, %r13
	je	.L40
	movl	$.LC1, %edx
	jmp	.L20
.L39:
	movl	$.LC1, %edx
	jmp	.L20
.L40:
	movl	$.LC0, %edx
.L20:
	subq	$8, %rsp
	pushq	%rax
	movq	%rbp, %r8
	movq	%rbx, %rcx
	movl	$.LC7, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	movq	%rbx, %r12
	movq	%rbp, %r13
	addq	$16, %rsp
	testq	%rbx, %rbx
	je	.L41
	movq	%rbx, %rax
	imulq	%rbp, %rax
	movl	$0, %edx
	divq	%rbx
	cmpq	%rax, %rbp
	jne	.L42
	movl	$1, %ebx
	jmp	.L21
.L41:
	movl	$1, %ebx
	jmp	.L21
.L42:
	movl	$0, %ebx
.L21:
	movq	%r12, %rbp
	imulq	%r13, %rbp
	movl	%ebx, %r9d
	movq	%rbp, %r8
	movq	%r13, %rcx
	movq	%r12, %rdx
	movl	$.LC8, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	16(%rsp), %rdx
	movq	%r13, %rsi
	movq	%r12, %rdi
	call	umult_ok_asm
	movq	16(%rsp), %r9
	cmpl	%eax, %ebx
	jne	.L43
	cmpq	%r9, %rbp
	je	.L44
	movl	$.LC1, %edx
	jmp	.L22
.L43:
	movl	$.LC1, %edx
	jmp	.L22
.L44:
	movl	$.LC0, %edx
.L22:
	subq	$8, %rsp
	pushq	%rax
	movq	%r13, %r8
	movq	%r12, %rcx
	movl	$.LC9, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	leaq	32(%rsp), %rdx
	movq	%r13, %rsi
	movq	%r12, %rdi
	call	umult_ok
	movq	32(%rsp), %r9
	addq	$16, %rsp
	cmpl	%eax, %ebx
	jne	.L45
	cmpq	%r9, %rbp
	je	.L46
	movl	$.LC1, %edx
	jmp	.L23
.L45:
	movl	$.LC1, %edx
	jmp	.L23
.L46:
	movl	$.LC0, %edx
.L23:
	subq	$8, %rsp
	pushq	%rax
	movq	%r13, %r8
	movq	%r12, %rcx
	movl	$.LC10, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	movl	$0, %edi
	call	exit
	.size	main, .-main
	.ident	"GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609"
	.section	.note.GNU-stack,"",@progbits
