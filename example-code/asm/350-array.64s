	.file	"350-array.c"
	.text
	.globl	get_value
	.type	get_value, @function
get_value:
	leaq	(%rsi,%rsi,2), %rcx
	leaq	0(,%rcx,4), %rax
	addq	%rdi, %rax
	movl	(%rax,%rdx,4), %eax
	ret
	.size	get_value, .-get_value
	.globl	get_value2
	.type	get_value2, @function
get_value2:
	movq	(%rdi,%rsi,8), %rax
	movq	(%rax,%rdx,8), %rax
	ret
	.size	get_value2, .-get_value2
	.globl	new_fix_matrix
	.type	new_fix_matrix, @function
new_fix_matrix:
	subq	$8, %rsp
	movl	$1024, %edi
	call	malloc
	addq	$8, %rsp
	ret
	.size	new_fix_matrix, .-new_fix_matrix
	.globl	fix_prod_ele
	.type	fix_prod_ele, @function
fix_prod_ele:
	movl	$0, %eax
	movl	$0, %r8d
	jmp	.L6
.L7:
	movq	%rdx, %r10
	salq	$6, %r10
	addq	%rdi, %r10
	movq	%r8, %r9
	salq	$6, %r9
	addq	%rsi, %r9
	movl	(%r9,%rcx,4), %r9d
	imull	(%r10,%r8,4), %r9d
	addl	%r9d, %eax
	addq	$1, %r8
.L6:
	cmpq	$15, %r8
	jle	.L7
	rep ret
	.size	fix_prod_ele, .-fix_prod_ele
	.globl	fix_prod_ele_opt
	.type	fix_prod_ele_opt, @function
fix_prod_ele_opt:
	salq	$6, %rdx
	addq	%rdx, %rdi
	salq	$2, %rcx
	leaq	(%rsi,%rcx), %r8
	leaq	1024(%rsi,%rcx), %rdx
	movl	$0, %eax
.L9:
	movl	(%r8), %ecx
	imull	(%rdi), %ecx
	addl	%ecx, %eax
	addq	$4, %rdi
	addq	$64, %r8
	cmpq	%r8, %rdx
	jne	.L9
	rep ret
	.size	fix_prod_ele_opt, .-fix_prod_ele_opt
	.globl	fix_set_diag
	.type	fix_set_diag, @function
fix_set_diag:
	movl	$0, %eax
	jmp	.L11
.L12:
	movq	%rax, %rdx
	salq	$6, %rdx
	addq	%rdi, %rdx
	movl	%esi, (%rdx,%rax,4)
	addq	$1, %rax
.L11:
	cmpq	$15, %rax
	jle	.L12
	rep ret
	.size	fix_set_diag, .-fix_set_diag
	.globl	fix_set_diag_opt
	.type	fix_set_diag_opt, @function
fix_set_diag_opt:
	movl	$0, %eax
.L14:
	movl	%esi, (%rdi,%rax,4)
	addq	$17, %rax
	cmpq	$272, %rax
	jne	.L14
	rep ret
	.size	fix_set_diag_opt, .-fix_set_diag_opt
	.globl	fix_ele
	.type	fix_ele, @function
fix_ele:
	movslq	%esi, %rsi
	salq	$6, %rsi
	addq	%rsi, %rdi
	movslq	%edx, %rdx
	movl	(%rdi,%rdx,4), %eax
	ret
	.size	fix_ele, .-fix_ele
	.globl	new_var_matrix
	.type	new_var_matrix, @function
new_var_matrix:
	subq	$8, %rsp
	imulq	%rdi, %rdi
	salq	$2, %rdi
	call	malloc
	addq	$8, %rsp
	ret
	.size	new_var_matrix, .-new_var_matrix
	.globl	var_ele
	.type	var_ele, @function
var_ele:
	imulq	%rdx, %rdi
	leaq	(%rsi,%rdi,4), %rax
	movl	(%rax,%rcx,4), %eax
	ret
	.size	var_ele, .-var_ele
	.globl	pvar_ele
	.type	pvar_ele, @function
pvar_ele:
	call	var_ele
	rep ret
	.size	pvar_ele, .-pvar_ele
	.globl	var_prod_ele
	.type	var_prod_ele, @function
var_prod_ele:
	pushq	%rbx
	movq	%rdi, %r11
	movl	$0, %eax
	movl	$0, %r9d
	jmp	.L21
.L22:
	movq	%rcx, %r10
	imulq	%r11, %r10
	leaq	(%rsi,%r10,4), %rbx
	movq	%r9, %r10
	imulq	%r11, %r10
	leaq	(%rdx,%r10,4), %r10
	movl	(%r10,%r8,4), %r10d
	imull	(%rbx,%r9,4), %r10d
	addl	%r10d, %eax
	addq	$1, %r9
.L21:
	cmpq	%rdi, %r9
	jl	.L22
	popq	%rbx
	ret
	.size	var_prod_ele, .-var_prod_ele
	.globl	var_prod_ele_opt
	.type	var_prod_ele_opt, @function
var_prod_ele_opt:
	movq	%rdi, %r11
	imulq	%rdi, %rcx
	salq	$2, %rcx
	leaq	(%rdx,%r8,4), %r9
	movl	$0, %edx
	movl	$0, %eax
	jmp	.L25
.L26:
	leaq	(%rsi,%rcx), %r10
	movl	(%r9), %r8d
	imull	(%r10,%rdx,4), %r8d
	addl	%r8d, %eax
	leaq	(%r9,%r11,4), %r9
	addq	$1, %rdx
.L25:
	cmpq	%rdi, %rdx
	jl	.L26
	rep ret
	.size	var_prod_ele_opt, .-var_prod_ele_opt
	.globl	B
	.data
	.align 32
	.type	B, @object
	.size	B, 32
B:
	.quad	row0
	.quad	row1
	.quad	row2
	.quad	row3
	.comm	row3,12,8
	.comm	row2,12,8
	.comm	row1,12,8
	.comm	row0,12,8
	.comm	A,60,32
	.ident	"GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609"
	.section	.note.GNU-stack,"",@progbits
